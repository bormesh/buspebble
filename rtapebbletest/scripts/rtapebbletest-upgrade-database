#! /usr/bin/env python
# vim: set expandtab ts=4 sw=4 filetype=python fileencoding=utf8:

import argparse
import logging
import os
import subprocess
import textwrap

import pkg_resources
import yaml

from rtapebbletest import configwrapper

log = logging.getLogger('rtapebbletest.upgrade_database')

def set_up_arguments():

    ap = argparse.ArgumentParser()

    ap.add_argument(
        'yaml_file_name',
        help='This is your config file')

    ap.add_argument('--dry-run', action='store_true',
        help='Do not actually update anything in the database.')

    return ap.parse_args()

def find_new_scripts(script_order, already_ran_scripts):

    """
    Generator that yields strings of script names that still need to be
    run.
    """

    for sql_script_name in script_order:

        log.debug("Checking sql_script_name {0}...".format(
            sql_script_name))

        absolute_path = pkg_resources.resource_filename(
            "rtapebbletest", "pgscripts/{0}".format(sql_script_name))

        just_the_file = os.path.basename(absolute_path)

        if just_the_file not in already_ran_scripts:

            log.debug("Looks like we should run {0}...".format(just_the_file))

            yield absolute_path

def get_scripts_already_ran(pgconn):

    """
    Return a set of strings of scripts we already ran.
    """

    cursor = pgconn.cursor()

    cursor.execute(textwrap.dedent("""
        select script_path
        from rtapebbletest_schema_version
        """))

    # Return these as a set, so lookups are a little faster.
    return {row.script_path for row in cursor}


def run_script(pgconn, path_to_script):

    cursor = pgconn.cursor()

    just_the_file = os.path.basename(path_to_script)

    try:

        cursor.execute(textwrap.dedent("""
            insert into rtapebbletest_schema_version
            (script_path, script_contents)
            values
            (
                %(path_to_script)s,
                %(script_contents)s
            )
            """),
            {
                'path_to_script': just_the_file,
                'script_contents': open(path_to_script, 'r').read()
            })

        # Next, run the SQL script, in single-transaction mode, so
        # hopefully, everything will get rolled back if something goes
        # wrong.

        env = os.environ.copy()
        env['PGPASSWORD'] = cw.database_password
        env["PGOPTIONS"] = "--client-min-messages=warning"

        subprocess.check_call([
                "psql",
                "--quiet",
                "--no-psqlrc",
                "-U",
                cw.database_user,
                "-h",
                cw.database_host,
                "-d",
                cw.database_name,
                "--single-transaction",
                "-v",
                "ON_ERROR_STOP=1",
                "-f",
                path_to_script,
            ],
            env=env)

    except Exception as ex:
        log.exception(ex)
        log.critical("script {0} blew up!".format(path_to_script))
        pgconn.rollback()
        raise

    else:

        log.info("Just ran {0}.".format(
            os.path.basename(path_to_script)))

        pgconn.commit()


def maybe_run_setup_script(pgconn, setup_script):

    """
    Check if the rtapebbletest_schema_version table exists.

    If it does not, run the initial setup script.
    """

    cursor = pgconn.cursor()

    cursor.execute(textwrap.dedent("""
        select exists(
            select 1
            from pg_catalog.pg_class
            where relname = 'rtapebbletest_schema_version'
            and relkind = 'r'
        )
        """))

    if cursor.fetchone().exists:
        return

    else:
        log.info("About to create rtapebbletest_schema_version table.")

        env = os.environ.copy()
        env['PGPASSWORD'] = cw.database_password
        env["PGOPTIONS"] = "--client-min-messages=warning"

        path_to_setup_script = pkg_resources.resource_filename(
            "rtapebbletest", "pgscripts/{0}".format(setup_script))

        subprocess.check_call([
                "psql",
                "--quiet",
                "--no-psqlrc",
                "-U",
                cw.database_user,
                "-h",
                cw.database_host,
                "-d",
                cw.database_name,
                "--single-transaction",
                "-f",
                path_to_setup_script,
            ],
            env=env)

if __name__ == '__main__':

    args = set_up_arguments()

    cw = configwrapper.ConfigWrapper.load_yaml(
        args.yaml_file_name)

    cw.configure_logging('script')

    cw.create_postgresql_connection(register_composite_types=False)

    d = yaml.safe_load(pkg_resources.resource_stream(
        "rtapebbletest",
        "pgscripts/script-run-order.yaml"))

    maybe_run_setup_script(
        cw.get_pgconn(),
        d['setup_script'])

    already_ran_scripts = get_scripts_already_ran(cw.get_pgconn())

    for new_script in find_new_scripts(
        d['script_order'],
        already_ran_scripts):

        run_script(cw.get_pgconn(), new_script)

    log.info("All done!")
